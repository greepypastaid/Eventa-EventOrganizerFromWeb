"A datetime string with format Y-m-d H:i:s, e.g. 2018-05-23 13:43:32."
scalar DateTime @scalar(class: "App\\GraphQL\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    events: [Event!]! @all(model: "App\\Models\\Event")
    
    me: User @field(resolver: "App\\GraphQL\\Queries\\MeQuery")
    event(id: ID!): Event @field(resolver: "App\\GraphQL\\Queries\\EventQuery@event")
    registrations(eventId: ID!): [Registration!] @field(resolver: "App\\GraphQL\\Queries\\RegistrationQuery@registrations")
    stats(eventId: ID!): Stats @field(resolver: "App\\GraphQL\\Queries\\StatsQuery@stats")
}

type User {
  id: ID!
  name: String!
  email: String!
  role: String!
  created_at: DateTime!
  registrations: [Registration!] @hasMany
  attendances: [Attendance!] @hasMany
  notifications: [Notification!] @hasMany
}

type AuthPayload {
  user: User!
  token: String!
}

type ResetPasswordResponse {
  status: String!
  message: String!
}

type Event {
  id: ID!
  title: String!
  description: String
  date: DateTime!
  location: String
  logo_url: String
  primary_color: String
  secondary_color: String
  created_at: DateTime!
  updated_at: DateTime!
  sessions: [EventSession!] @hasMany
  registrations: [Registration!] @hasMany
}

type EventSession {
  id: ID!
  title: String!
  speaker: String
  startTime: String!
  endTime: String!
  event: Event! @belongsTo
  attendances: [Attendance!] @hasMany
}

type Registration {
  id: ID!
  event: Event! @belongsTo
  participant: User! @belongsTo(relation: "participant")
  ticket: Ticket! @belongsTo
  verified: Boolean!
  custom_fields: [CustomField!]
  created_at: DateTime!
}

type Ticket {
  id: ID!
  qrCode: String!
  sentAt: DateTime
  created_at: DateTime!
}

type Attendance {
  id: ID!
  participant: User! @belongsTo(relation: "participant")
  session: EventSession! @belongsTo
  checkedInAt: DateTime
  created_at: DateTime!
}

type Notification {
  id: ID!
  title: String!
  message: String!
  recipient: User! @belongsTo(relation: "recipient")
  sentAt: DateTime!
  created_at: DateTime!
}

type Stats {
  totalRegistrations: Int!
  verifiedRegistrations: Int!
  sessionAttendance: [SessionAttendance!]!
}

type SessionAttendance {
  session: String!
  count: Int!
}

type CustomField {
  name: String!
  value: String!
}

input CustomFieldInput {
  name: String!
  value: String!
}

input RegisterInput {
  name: String!
  email: String!
  password: String!
  role: String
}

input LoginInput {
  email: String!
  password: String!
}

input EventInput {
  title: String!
  description: String
  date: DateTime!
  location: String
}

input SessionInput {
  title: String!
  speaker: String
  startTime: String!
  endTime: String!
  event_id: ID!
}

input RegistrationInput {
  eventId: ID!
  customFields: [CustomFieldInput]
}

input QRCheckInInput {
  qrCode: String!
  sessionId: ID!
}

input NotificationInput {
  title: String!
  message: String!
  userIds: [ID!]!
}

input EventThemeInput {
  logoUrl: String
  primaryColor: String
  secondaryColor: String
}

extend type Query {
  eventSessions: [EventSession!]! @all(model: "App\\Models\\EventSession")
}

type Mutation {
  registerUser(name: String!, email: String!, password: String!, role: String): AuthPayload 
    @field(resolver: "App\\GraphQL\\Mutations\\AuthResolver@register")

  loginUser(email: String!, password: String!): AuthPayload 
    @field(resolver: "App\\GraphQL\\Mutations\\AuthResolver@login")

  changePassword(
    currentPassword: String!,
    newPassword: String!
  ): Boolean
    @guard(with: ["sanctum"])
    @field(resolver: "App\\GraphQL\\Mutations\\ChangePasswordResolver")

  createEvent(
    title: String!
    description: String
    date: DateTime!
    location: String
  ): Event 
    @guard(with: ["sanctum"]) 
    @field(resolver: "App\\GraphQL\\Mutations\\EventMutation@createEvent")

  deleteEvent(id: ID!): Boolean 
    @guard(with: ["sanctum"])
    @field(resolver: "App\\GraphQL\\Mutations\\EventMutation@deleteEvent")

  createEventSession(
    title: String!
    speaker: String
    startTime: String!
    endTime: String!
    event_id: ID!
  ):EventSession @create(model: "App\\Models\\EventSession")
    
  deleteEventSession(id: ID!): Boolean 
    @field(resolver: "App\\GraphQL\\Mutations\\EventSessionMutation@delete")
    
  registerToEvent(input: RegistrationInput!): Registration!
    @guard(with: ["sanctum"])
    @field(resolver: "App\\GraphQL\\Mutations\\RegistrationMutation@registerToEvent")
    
  checkIn(input: QRCheckInInput!): Attendance!
    @guard(with: ["sanctum"])
    @field(resolver: "App\\GraphQL\\Mutations\\AttendanceMutation@checkIn")
    
  sendNotification(input: NotificationInput!): [Notification!]!
    @guard(with: ["sanctum"])
    @field(resolver: "App\\GraphQL\\Mutations\\NotificationMutation@sendNotification")
    
  updateEventTheme(eventId: ID!, input: EventThemeInput!): Event!
    @guard(with: ["sanctum"])
    @field(resolver: "App\\GraphQL\\Mutations\\EventThemeMutation@updateEventTheme")
}